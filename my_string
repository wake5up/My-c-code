    1.实现strcpy替换
    #include<stdio.h>
    #include<assert.h>

    char my_strcpy(char *dest, const char *src)
    {
      assert(dest);
      assert(src);
      while (*src)
      {
        *dest = *src;
        dest++;
        src++;
      }
    }

    int main()
    {
      char dest[20] ="1234567890";
      char src []= "abcdef";
      my_strcpy(dest, src);
      printf("%s\n", dest);
      system("pause");
      return 0;
    }
    2.实现strcat拼接
    #include<stdio.h>
    #include<assert.h>

    char my_strcat(char *dest, const char *src)
    {
      while (*dest != '\0')
      {
        dest++;
      }
      while (*src != '\0')
      {
        *dest = *src;
        dest++;
        src++;
      }
    }
    int main()
    {
      char dest[20] = "1234567890";
      char src []= "abcdef";
      my_strcat(dest, src);
      printf("%s", dest);
      system("pause");
      return 0;
    }

      3.实现strstr  
    #include<stdio.h>
    #include<assert.h>

    int my_strstr(char *dest, const char *src)
    {
      assert(dest);
      assert(src);
      while (*dest!=*src)
      {
        dest++;
      }
      while (*src != '\0'&&*dest!='\0')
      {
        if (*dest == *src)
        {
          dest++;
          src++;
        }
        else
        {
          return 0;
        }
      }
      if (*dest == '\0')
      {
        return 0;
      }
      return 1;
    }

    int main()
    {
      char dest[20] = "12abcdef90";
      char src []= "abcdef";
      int ret = my_strstr(dest, src);
      if (1 == ret)
      {
        printf("找到了！\n");
      }
      else
      {
        printf("没找到！\n");
      }
      system("pause");
      return 0;
    }
    4.实现strchr
    
    6.实现memcpy替换n个字符
    #include<stdio.h>
    #include<assert.h>

    char my_memcpy(char *dest, const char *src,int n)
    {
      assert(dest);
      assert(src);
      while (n>0)
      {
        *dest = *src;
        dest++;
        src++;
        n--;
      }
    }

    int main()
    {
      char dest[20] = "1234567890";
      char src[] = "abcdef";
      int n = 3;
      my_memcpy(dest, src,n);
      printf("%s\n", dest);
      system("pause");
      return 0;
    }
    7.实现memmove

8.实现strncmp
#include<stdio.h>

int My_strncmp(char* str1, char* str2, int n)
{
	while (n--)
	{
		if (*str1 > *str2)
		{
			return 1;
		}
		else if (*str1 < *str2)
		{
			return -1;
		}
		else
		{
			str1++;
			str2++;
		}
	}
	return 0;
}
int main()
{
	char str1[] = "abcdefg";
	char str2[] = "abcx";
	int ret = My_strncmp(str1, str2, 4);
	if (1 == ret)
	{
		printf("str1>str2");
	}
	else if (0 == ret)
	{
		printf("str1=str2");
	}
	else
	{
		printf("str1<str2");
	}
	system("pause");
	return 0;
}
9.实现strncat
#include<stdio.h>

void My_strncat(char* str1, char* str2, int n)
{
	while (*str1 != '\0')
	{
		str1++;
	}
	while (n--)
	{
		*str1++ = *str2++;
	}
}
int main()
{
	char str1[20] = "abcdefg";
	char str2[] = "1234567";
	My_strncat(str1, str2, 4);
	printf("%s",str1);
	system("pause");
	return 0;
}

