    1.实现strcpy替换
    #include<stdio.h>
    #include<assert.h>

    char my_strcpy(char *dest, const char *src)
    {
      assert(dest);
      assert(src);
      while (*src)
      {
        *dest = *src;
        dest++;
        src++;
      }
    }

    int main()
    {
      char dest[20] ="1234567890";
      char src []= "abcdef";
      my_strcpy(dest, src);
      printf("%s\n", dest);
      system("pause");
      return 0;
    }
    2.实现strcat拼接
    #include<stdio.h>
    #include<assert.h>

    char my_strcat(char *dest, const char *src)
    {
      while (*dest != '\0')
      {
        dest++;
      }
      while (*src != '\0')
      {
        *dest = *src;
        dest++;
        src++;
      }
    }
    int main()
    {
      char dest[20] = "1234567890";
      char src []= "abcdef";
      my_strcat(dest, src);
      printf("%s", dest);
      system("pause");
      return 0;
    }

      3.实现strstr   a中是否有b
    #include<stdio.h>
    #include<assert.h>

    int my_strstr(char *dest, const char *src)
    {
      assert(dest);
      assert(src);
      while (*dest!=*src)
      {
        dest++;
      }
      while (*src != '\0'&&*dest!='\0')
      {
        if (*dest == *src)
        {
          dest++;
          src++;
        }
        else
        {
          return 0;
        }
      }
      if (*dest == '\0')
      {
        return 0;
      }
      return 1;
    }

    int main()
    {
      char dest[20] = "12abcdef90";
      char src []= "abcdef";
      int ret = my_strstr(dest, src);
      if (1 == ret)
      {
        printf("找到了！\n");
      }
      else
      {
        printf("没找到！\n");
      }
      system("pause");
      return 0;
    }
    4.实现strchr查找位置
    5.实现strcmp是否相等
    #include<stdio.h>
    #include<assert.h>

    int my_strcmp(char *dest, const char *src, int len1, int len2)
    {
      assert(dest);
      assert(src);
      if (len1 != len2)
      {
        return 0;
      }
      else
      {
        while (*dest != '\0')
        {
          if (*dest == *src)
          {
            dest++;
            src++;
          }
          else
          {
            return 0;
          }
        }
        return 1;
      }
    }
    int main()
    {
      char dest[] = "abcdef";
      char src []= "abcdef";
      int len1 = sizeof(dest) / sizeof(dest[0]) - 1;
      int len2 = sizeof(src) / sizeof(src[0]) - 1;
      int ret = my_strcmp(dest, src,len1,len2);
      if (1 == ret)
      {
        printf("字符串一样！\n");
      }
      else
      {
        printf("字符串不一样！\n");
      }
      system("pause");
      return 0;
    }
    6.实现memcpy替换n个字符
    #include<stdio.h>
    #include<assert.h>

    char my_memcpy(char *dest, const char *src,int n)
    {
      assert(dest);
      assert(src);
      while (n>0)
      {
        *dest = *src;
        dest++;
        src++;
        n--;
      }
    }

    int main()
    {
      char dest[20] = "1234567890";
      char src[] = "abcdef";
      int n = 3;
      my_memcpy(dest, src,n);
      printf("%s\n", dest);
      system("pause");
      return 0;
    }
    7.实现memmove

